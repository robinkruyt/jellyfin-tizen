trigger:
- master

jobs:
  - job: build_web
    displayName: Build Jellyfin-web
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - checkout: self
        clean: true
        submodules: true
        persistCredentials: true

      - task: CmdLine@2
        displayName: Setup directories and variables
        inputs:
          script: |
            echo "##vso[task.setvariable variable=JELLYFIN_WEB_DIR]$(Agent.TempDirectory)/jellyfin-web"
            echo "##vso[task.setvariable variable=TIZEN_HOME_DIR]$(Agent.TempDirectory)/tizen"
            echo "##vso[task.setvariable variable=CERTIFICATE_DIR]$(Agent.TempDirectory)/certificates"
          failOnStderr: false

      - task: CmdLine@2
        displayName: Check out Jellyfin Web
        inputs:
          script: |
            git clone --single-branch --branch master --depth=1 https://github.com/jellyfin/jellyfin-web.git $JELLYFIN_WEB_DIR
      - task: UseNode@1
        displayName: Install Node
        inputs:
          version: '12.x'
      - task: CmdLine@2
        displayName: Install Jellyfin Web
        inputs:
          script: |
            yarn install
          workingDirectory: $(JELLYFIN_WEB_DIR)
          failOnStderr: false

      - task: CmdLine@2
        displayName: Install Jellyfin Tizen
        inputs:
          script: | 
            JELLYFIN_WEB_DIR=$JELLYFIN_WEB_DIR/dist yarn install
          failOnStderr: false

      - task: CmdLine@2
        displayName: Setup Tizen Studio
        inputs:
          script: | 
            export TIZEN_CLI_INSTALLER_URL=http://download.tizen.org/sdk/Installer/tizen-studio_3.7/web-cli_Tizen_Studio_3.7_ubuntu-64.bin
            export TIZEN_STUDIO=$TIZEN_HOME_DIR/tizen-studio
            
            mkdir -p $TIZEN_HOME_DIR
            cd $TIZEN_HOME_DIR

            INSTALLER=$(Agent.TempDirectory)/$(basename "$TIZEN_CLI_INSTALLER_URL") \
              && curl "$TIZEN_CLI_INSTALLER_URL" > "$INSTALLER" \
              && chmod 755 "$INSTALLER" \
              && "$INSTALLER" --no-java-check --accept-license $TIZEN_STUDIO \
              && rm "$INSTALLER" \
              && cd $TIZEN_STUDIO/tools/certificate-generator/patches/partner \
              && ./patch.sh $TIZEN_STUDIO \
              && rm -rf \
                $TIZEN_HOME_DIR/.package-manager \
                $TIZEN_HOME_DIR/tizen-studio/license \
                $TIZEN_HOME_DIR/tizen-studio/package-manager            
          failOnStderr: false

      - task: CmdLine@2
        displayName: Setup certificates
        inputs:
          script: |
            export PATH=$TIZEN_HOME_DIR/tizen-studio/tools:$TIZEN_HOME_DIR/tizen-studio/tools/ide/bin:$PATH
            ls $TIZEN_HOME_DIR/tizen-studio/tools
            ls $TIZEN_HOME_DIR/tizen-studio/tools/ide/bin

            mkdir -p $CERTIFICATE_DIR
            
            echo $(CERTIFICATE) | base64 --decode > $CERTIFICATE_DIR/certificate.p12
            tizen security-profiles add -n DebugProfile -a $CERTIFICATE_DIR/certificate.p12 -p 1234

      - task: CmdLine@2
        displayName: Package build
        inputs:
          script: |
            export PATH=$TIZEN_HOME_DIR/tizen-studio/tools:$TIZEN_HOME_DIR/tizen-studio/tools/ide/bin:$PATH
            tizen build-web -e ".*" -e gulpfile.js -e README.md -e "node_modules/*" -e "jellyfin-web/*" -e "package*.json" -e "yarn.lock"
            tizen package -t wgt -s debug -- .buildResult